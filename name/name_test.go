package name_test

import (
	"testing"

	"github.com/lindsaygelle/goheader/name"
)

// TestNew tests New.
func TestNew(t *testing.T) {
	tests := []struct {
		input    string
		expected name.Name
	}{
		{"A-IM", name.AIM},
		{"Accept", name.Accept},
		{"Accept-CH", name.AcceptCH},
		{"Accept-CH-Lifetime", name.AcceptCHLifetime},
		{"Accept-Charset", name.AcceptCharset},
		{"Accept-Datetime", name.AcceptDatetime},
		{"Accept-Encoding", name.AcceptEncoding},
		{"Accept-Language", name.AcceptLanguage},
		{"Accept-Patch", name.AcceptPatch},
		{"Accept-Post", name.AcceptPost},
		{"Accept-Ranges", name.AcceptRanges},
		{"Access-Control-Allow-Credentials", name.AccessControlAllowCredentials},
		{"Access-Control-Allow-Headers", name.AccessControlAllowHeaders},
		{"Access-Control-Allow-Methods", name.AccessControlAllowMethods},
		{"Access-Control-Allow-Origin", name.AccessControlAllowOrigin},
		{"Access-Control-Expose-Headers", name.AccessControlExposeHeaders},
		{"Access-Control-Max-Age", name.AccessControlMaxAge},
		{"Access-Control-Request-Headers", name.AccessControlRequestHeaders},
		{"Access-Control-Request-Method", name.AccessControlRequestMethod},
		{"Age", name.Age},
		{"Allow", name.Allow},
		{"Alt-Svc", name.AltSvc},
		{"Alt-Used", name.AltUsed},
		{"Authorization", name.Authorization},
		{"Cache-Control", name.CacheControl},
		{"Clear-Site-Data", name.ClearSiteData},
		{"Connection", name.Connection},
		{"Content-DPR", name.ContentDPR},
		{"Content-Disposition", name.ContentDisposition},
		{"Content-Encoding", name.ContentEncoding},
		{"Content-Language", name.ContentLanguage},
		{"Content-Length", name.ContentLength},
		{"Content-Location", name.ContentLocation},
		{"Content-MD5", name.ContentMD5},
		{"Content-Range", name.ContentRange},
		{"Content-Security-Policy", name.ContentSecurityPolicy},
		{"Content-Security-Policy-Report-Only", name.ContentSecurityPolicyReportOnly},
		{"Content-Type", name.ContentType},
		{"Cookie", name.Cookie},
		{"Correlation-ID", name.CorrelationID},
		{"Critical-CH", name.CriticalCH},
		{"Cross-Origin-Embedder-Policy", name.CrossOriginEmbedderPolicy},
		{"Cross-Origin-Opener-Policy", name.CrossOriginOpenerPolicy},
		{"Cross-Origin-Resource-Policy", name.CrossOriginResourcePolicy},
		{"DNT", name.DNT},
		{"DPR", name.DPR},
		{"Date", name.Date},
		{"Delta-Base", name.DeltaBase},
		{"Device-Memory", name.DeviceMemory},
		{"Digest", name.Digest},
		{"Downlink", name.Downlink},
		{"ECT", name.ECT},
		{"ETag", name.ETag},
		{"Early-Data", name.EarlyData},
		{"Expect", name.Expect},
		{"Expect-CT", name.ExpectCT},
		{"Expires", name.Expires},
		{"Forwarded", name.Forwarded},
		{"From", name.From},
		{"Front-End-Https", name.FrontEndHTTPS},
		{"HTTP2-Settings", name.HTTP2Settings},
		{"Host", name.Host},
		{"IM", name.IM},
		{"If-Match", name.IfMatch},
		{"If-Modified-Since", name.IfModifiedSince},
		{"If-None-Match", name.IfNoneMatch},
		{"If-Range", name.IfRange},
		{"If-Unmodified-Since", name.IfUnmodifiedSince},
		{"Keep-Alive", name.KeepAlive},
		{"Large-Allocation", name.LargeAllocation},
		{"Last-Modified", name.LastModified},
		{"Link", name.Link},
		{"Location", name.Location},
		{"Max-Forwards", name.MaxForwards},
		{"NEL", name.NEL},
		{"Origin", name.Origin},
		{"P3P", name.P3P},
		{"Permissions-Policy", name.PermissionsPolicy},
		{"Pragma", name.Pragma},
		{"Prefer", name.Prefer},
		{"Preference-Applied", name.PreferenceApplied},
		{"Proxy-Authenticate", name.ProxyAuthenticate},
		{"Proxy-Authorization", name.ProxyAuthorization},
		{"Proxy-Connection", name.ProxyConnection},
		{"Public-Key-Pins", name.PublicKeyPins},
		{"RTT", name.RTT},
		{"Range", name.Range},
		{"Referer", name.Referer},
		{"Referrer-Policy", name.ReferrerPolicy},
		{"Refresh", name.Refresh},
		{"Report-To", name.ReportTo},
		{"Retry-After", name.RetryAfter},
		{"Save-Data", name.SaveData},
		{"Sec-CH-Prefers-Color-Scheme", name.SecCHPrefersColorScheme},
		{"Sec-CH-Prefers-Reduced-Motion", name.SecCHPrefersReducedMotion},
		{"Sec-CH-Prefers-Reduced-Transparency", name.SecCHPrefersReducedTransparency},
		{"Sec-CH-UA", name.SecCHUA},
		{"Sec-CH-UA-Arch", name.SecCHUAArch},
		{"Sec-CH-UA-Bitness", name.SecCHUABitness},
		{"Sec-CH-UA-Full-Version", name.SecCHUAFullVersion},
		{"Sec-CH-UA-Full-Version-List", name.SecCHUAFullVersionList},
		{"Sec-CH-UA-Mobile", name.SecCHUAMobile},
		{"Sec-CH-UA-Model", name.SecCHUAModel},
		{"Sec-CH-UA-Platform", name.SecCHUAPlatform},
		{"Sec-CH-UA-Platform-Version", name.SecCHUAPlatformVersion},
		{"Sec-Fetch-Dest", name.SecFetchDest},
		{"Sec-Fetch-Mode", name.SecFetchMode},
		{"Sec-Fetch-Site", name.SecFetchSite},
		{"Sec-Fetch-User", name.SecFetchUser},
		{"Sec-GPC", name.SecGPC},
		{"Sec-Purpose", name.SecPurpose},
		{"Sec-WebSocket-Accept", name.SecWebSocketAccept},
		{"Server", name.Server},
		{"Server-Timing", name.ServerTiming},
		{"Service-Worker-Navigation-Preload", name.ServiceWorkerNavigationPreload},
		{"Set-Cookie", name.SetCookie},
		{"SourceMap", name.SourceMap},
		{"Status", name.Status},
		{"Strict-Transport-Security", name.StrictTransportSecurity},
		{"TE", name.TE},
		{"Timing-Allow-Origin", name.TimingAllowOrigin},
		{"Tk", name.TK},
		{"Trailer", name.Trailer},
		{"Transfer-Encoding", name.TransferEncoding},
		{"Upgrade", name.Upgrade},
		{"Upgrade-Insecure-Requests", name.UpgradeInsecureRequests},
		{"User-Agent", name.UserAgent},
		{"Vary", name.Vary},
		{"Via", name.Via},
		{"Viewport-Width", name.ViewportWidth},
		{"WWW-Authenticate", name.WWWAuthenticate},
		{"Want-Digest", name.WantDigest},
		{"Warning", name.Warning},
		{"Width", name.Width},
		{"X-ATT-DeviceId", name.XATTDeviceID},
		{"X-Content-Duration", name.XContentDuration},
		{"X-Content-Security-Policy", name.XContentSecurityPolicy},
		{"X-Content-Type-Options", name.XContentTypeOptions},
		{"X-Correlation-ID", name.XCorrelationID},
		{"X-Csrf-Token", name.XCSRFToken},
		{"X-DNS-Prefetch-Control", name.XDNSPrefetchControl},
		{"X-Forwarded-For", name.XForwardedFor},
		{"X-Forwarded-Host", name.XForwardedHost},
		{"X-Forwarded-Proto", name.XForwardedProto},
		{"X-Frame-Options", name.XFrameOptions},
		{"X-Http-Method-Override", name.XHTTPMethodOverride},
		{"X-Powered-By", name.XPoweredBy},
		{"X-Redirect-By", name.XRedirectBy},
		{"X-Request-ID", name.XRequestID},
		{"X-Requested-With", name.XRequestedWith},
		{"X-UA-Compatible", name.XUACompatible},
		{"X-UIDH", name.XUIDH},
		{"X-Wap-Profile", name.XWapProfile},
		{"X-WebKit-CSP", name.XWebKitCSP},
		{"X-XSS-Protection", name.XXSSProtection},
	}

	for _, test := range tests {
		t.Run(test.input, func(t *testing.T) {
			result := name.New(test.input)
			if result != test.expected {
				t.Errorf("Expected %v, but got %v", test.expected, result)
			}
		})
	}
}
